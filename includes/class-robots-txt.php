<?php

class ProductScraper_Robots_Txt {
    
    private $default_rules = array();
    private $custom_rules = array();
    
    public function __construct() {
        add_filter('robots_txt', array($this, 'enhance_robots_txt'), 10, 2);
        add_action('admin_init', array($this, 'register_robots_settings'));
        add_action('wp_ajax_save_robots_rules', array($this, 'ajax_save_robots_rules'));
        add_action('wp_ajax_reset_robots_rules', array($this, 'ajax_reset_robots_rules'));
        
        $this->load_default_rules();
        $this->load_custom_rules();
    }
    
    /**
     * Load default robots.txt rules
     */
    private function load_default_rules() {
        $this->default_rules = array(
            'user-agent' => array(
                '*' => array(
                    'allow' => array(
                        '/wp-content/uploads/',
                        '/wp-includes/js/',
                        '/wp-includes/css/'
                    ),
                    'disallow' => array(
                        '/wp-admin/',
                        '/wp-includes/',
                        '/wp-json/',
                        '/xmlrpc.php',
                        '/readme.html',
                        '/refer/'
                    )
                )
            ),
            'sitemap' => array(
                $this->get_sitemap_url()
            )
        );
    }
    
    /**
     * Load custom rules from database
     */
    private function load_custom_rules() {
        $this->custom_rules = get_option('product_scraper_robots_rules', array());
    }
    
    /**
     * Enhance robots.txt content
     */
    public function enhance_robots_txt($output, $public) {
        if (!$public) {
            return "User-agent: *\nDisallow: /";
        }
        
        $rules = $this->get_combined_rules();
        $robots_content = $this->generate_robots_content($rules);
        
        return $robots_content;
    }
    
    /**
     * Get combined rules (default + custom)
     */
    private function get_combined_rules() {
        $combined = $this->default_rules;
        
        // Merge custom rules
        if (!empty($this->custom_rules)) {
            foreach ($this->custom_rules as $section => $rules) {
                if (!isset($combined[$section])) {
                    $combined[$section] = $rules;
                } else {
                    foreach ($rules as $key => $values) {
                        if (is_array($values)) {
                            if (!isset($combined[$section][$key])) {
                                $combined[$section][$key] = $values;
                            } else {
                                $combined[$section][$key] = array_merge(
                                    $combined[$section][$key],
                                    $values
                                );
                            }
                        } else {
                            $combined[$section][$key] = $values;
                        }
                    }
                }
            }
        }
        
        return $combined;
    }
    
    /**
     * Generate robots.txt content from rules
     */
    private function generate_robots_content($rules) {
        $content = "# Robots.txt generated by Product Scraper SEO\n";
        $content .= "# Last modified: " . date('Y-m-d H:i:s') . "\n\n";
        
        foreach ($rules as $section => $section_rules) {
            if ($section === 'user-agent') {
                foreach ($section_rules as $user_agent => $directives) {
                    $content .= "User-agent: $user_agent\n";
                    
                    foreach ($directives as $directive => $paths) {
                        if (is_array($paths)) {
                            foreach ($paths as $path) {
                                $content .= ucfirst($directive) . ": $path\n";
                            }
                        } else {
                            $content .= ucfirst($directive) . ": $paths\n";
                        }
                    }
                    $content .= "\n";
                }
            } elseif ($section === 'sitemap') {
                foreach ($section_rules as $sitemap_url) {
                    $content .= "Sitemap: $sitemap_url\n";
                }
                $content .= "\n";
            } else {
                // Handle other sections
                foreach ($section_rules as $key => $value) {
                    $content .= ucfirst($key) . ": $value\n";
                }
                $content .= "\n";
            }
        }
        
        return $content;
    }
    
    /**
     * Get sitemap URL
     */
    private function get_sitemap_url() {
        if (function_exists('wp_sitemaps_get_server')) {
            return home_url('/wp-sitemap.xml');
        }
        
        // Fallback to common sitemap locations
        $possible_sitemaps = array(
            '/sitemap.xml',
            '/sitemap_index.xml',
            '/wp-sitemap.xml'
        );
        
        foreach ($possible_sitemaps as $sitemap) {
            $url = home_url($sitemap);
            if ($this->check_url_exists($url)) {
                return $url;
            }
        }
        
        return home_url('/sitemap.xml');
    }
    
    /**
     * Check if URL exists
     */
    private function check_url_exists($url) {
        $response = wp_remote_head($url);
        return !is_wp_error($response) && wp_remote_retrieve_response_code($response) === 200;
    }
    
    /**
     * Register robots.txt settings
     */
    public function register_robots_settings() {
        register_setting('product_scraper_seo_settings', 'product_scraper_robots_rules');
        register_setting('product_scraper_seo_settings', 'product_scraper_robots_custom_content');
    }
    
    /**
     * Get current robots.txt content
     */
    public function get_current_robots_content() {
        $public = get_option('blog_public');
        if (!$public) {
            return "User-agent: *\nDisallow: /";
        }
        
        return $this->enhance_robots_txt('', $public);
    }
    
    /**
     * Validate robots.txt rules
     */
    public function validate_rules($rules) {
        $errors = array();
        
        if (!is_array($rules)) {
            $errors[] = 'Rules must be an array';
            return $errors;
        }
        
        // Validate user-agent rules
        if (isset($rules['user-agent'])) {
            foreach ($rules['user-agent'] as $user_agent => $directives) {
                if (!is_array($directives)) {
                    $errors[] = "Directives for user-agent $user_agent must be an array";
                    continue;
                }
                
                foreach ($directives as $directive => $paths) {
                    if (!in_array($directive, array('allow', 'disallow', 'crawl-delay'))) {
                        $errors[] = "Invalid directive '$directive' for user-agent $user_agent";
                    }
                    
                    if ($directive === 'crawl-delay' && !is_numeric($paths)) {
                        $errors[] = "Crawl-delay must be a numeric value for user-agent $user_agent";
                    }
                }
            }
        }
        
        return $errors;
    }
    
    /**
     * Add custom rule
     */
    public function add_custom_rule($user_agent, $directive, $path) {
        if (!isset($this->custom_rules['user-agent'])) {
            $this->custom_rules['user-agent'] = array();
        }
        
        if (!isset($this->custom_rules['user-agent'][$user_agent])) {
            $this->custom_rules['user-agent'][$user_agent] = array();
        }
        
        if (!isset($this->custom_rules['user-agent'][$user_agent][$directive])) {
            $this->custom_rules['user-agent'][$user_agent][$directive] = array();
        }
        
        $this->custom_rules['user-agent'][$user_agent][$directive][] = $path;
        
        return $this->save_custom_rules();
    }
    
    /**
     * Remove custom rule
     */
    public function remove_custom_rule($user_agent, $directive, $path) {
        if (!isset($this->custom_rules['user-agent'][$user_agent][$directive])) {
            return false;
        }
        
        $key = array_search($path, $this->custom_rules['user-agent'][$user_agent][$directive]);
        if ($key !== false) {
            unset($this->custom_rules['user-agent'][$user_agent][$directive][$key]);
            $this->custom_rules['user-agent'][$user_agent][$directive] = array_values(
                $this->custom_rules['user-agent'][$user_agent][$directive]
            );
            
            // Remove empty sections
            if (empty($this->custom_rules['user-agent'][$user_agent][$directive])) {
                unset($this->custom_rules['user-agent'][$user_agent][$directive]);
            }
            if (empty($this->custom_rules['user-agent'][$user_agent])) {
                unset($this->custom_rules['user-agent'][$user_agent]);
            }
            if (empty($this->custom_rules['user-agent'])) {
                unset($this->custom_rules['user-agent']);
            }
        }
        
        return $this->save_custom_rules();
    }
    
    /**
     * Add sitemap URL
     */
    public function add_sitemap($sitemap_url) {
        if (!isset($this->custom_rules['sitemap'])) {
            $this->custom_rules['sitemap'] = array();
        }
        
        if (!in_array($sitemap_url, $this->custom_rules['sitemap'])) {
            $this->custom_rules['sitemap'][] = $sitemap_url;
        }
        
        return $this->save_custom_rules();
    }
    
    /**
     * Save custom rules to database
     */
    private function save_custom_rules() {
        return update_option('product_scraper_robots_rules', $this->custom_rules);
    }
    
    /**
     * Reset to default rules
     */
    public function reset_to_defaults() {
        delete_option('product_scraper_robots_rules');
        $this->custom_rules = array();
        return true;
    }
    
    /**
     * Analyze current robots.txt
     */
    public function analyze_robots_txt() {
        $analysis = array(
            'status' => 'unknown',
            'issues' => array(),
            'recommendations' => array(),
            'warnings' => array()
        );
        
        $current_content = $this->get_current_robots_content();
        
        // Check if robots.txt is accessible
        $robots_url = home_url('/robots.txt');
        $response = wp_remote_get($robots_url);
        
        if (is_wp_error($response)) {
            $analysis['status'] = 'error';
            $analysis['issues'][] = 'Robots.txt is not accessible';
            return $analysis;
        }
        
        $status_code = wp_remote_retrieve_response_code($response);
        if ($status_code !== 200) {
            $analysis['status'] = 'error';
            $analysis['issues'][] = "Robots.txt returned status code: $status_code";
            return $analysis;
        }
        
        $analysis['status'] = 'accessible';
        
        // Check for common issues
        $content = wp_remote_retrieve_body($response);
        
        // Check for sitemap declaration
        if (strpos($content, 'Sitemap:') === false) {
            $analysis['issues'][] = 'Sitemap not declared in robots.txt';
        }
        
        // Check for overly restrictive rules
        if (strpos($content, 'Disallow: /') !== false && strpos($content, 'Disallow: /') === strpos($content, 'User-agent: *')) {
            $analysis['critical_issues'][] = 'Entire site is blocked from indexing';
        }
        
        // Check for allow all
        if (strpos($content, 'Allow: /') !== false) {
            $analysis['warnings'][] = 'Entire site is allowed - consider being more specific';
        }
        
        // Check for important directories
        $important_dirs = array('/wp-admin/', '/wp-includes/', '/wp-content/uploads/');
        foreach ($important_dirs as $dir) {
            if (strpos($content, "Disallow: $dir") === false) {
                $analysis['recommendations'][] = "Consider disallowing $dir";
            }
        }
        
        return $analysis;
    }
    
    /**
     * AJAX handler for saving robots rules
     */
    public function ajax_save_robots_rules() {
        check_ajax_referer('product_scraper_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Insufficient permissions');
        }
        
        $rules = isset($_POST['rules']) ? $_POST['rules'] : array();
        $validation_errors = $this->validate_rules($rules);
        
        if (!empty($validation_errors)) {
            wp_send_json_error($validation_errors);
        }
        
        $this->custom_rules = $rules;
        $saved = $this->save_custom_rules();
        
        if ($saved) {
            wp_send_json_success('Rules saved successfully');
        } else {
            wp_send_json_error('Failed to save rules');
        }
    }
    
    /**
     * AJAX handler for resetting robots rules
     */
    public function ajax_reset_robots_rules() {
        check_ajax_referer('product_scraper_nonce', 'nonce');
        
        if (!current_user_can('manage_options')) {
            wp_send_json_error('Insufficient permissions');
        }
        
        $reset = $this->reset_to_defaults();
        
        if ($reset) {
            wp_send_json_success('Rules reset to defaults');
        } else {
            wp_send_json_error('Failed to reset rules');
        }
    }
    
    /**
     * Get robots.txt editor data
     */
    public function get_editor_data() {
        return array(
            'current_rules' => $this->get_combined_rules(),
            'custom_rules' => $this->custom_rules,
            'default_rules' => $this->default_rules,
            'analysis' => $this->analyze_robots_txt(),
            'current_content' => $this->get_current_robots_content()
        );
    }
    
    /**
     * Generate robots.txt for specific search engines
     */
    public function get_search_engine_specific_rules($search_engine) {
        $rules = array();
        
        switch ($search_engine) {
            case 'google':
                $rules = array(
                    'user-agent' => array(
                        'Googlebot' => array(
                            'allow' => array('/'),
                            'crawl-delay' => '1'
                        )
                    )
                );
                break;
                
            case 'bing':
                $rules = array(
                    'user-agent' => array(
                        'Bingbot' => array(
                            'allow' => array('/'),
                            'crawl-delay' => '1'
                        )
                    )
                );
                break;
                
            case 'baidu':
                $rules = array(
                    'user-agent' => array(
                        'Baiduspider' => array(
                            'allow' => array('/'),
                            'crawl-delay' => '5'
                        )
                    )
                );
                break;
        }
        
        return $rules;
    }
}